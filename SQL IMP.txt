--
COALESCE function is used to return the first non-null expression in a list. It takes multiple arguments and returns the value of the first non-null expression in the list. If all the expressions in the list are null, then COALESCE returns null.

example:coalesce(COLUMN1,COLUMN2)
it will return value of first not null column

another use case to change with null value
example :coalesce(COLUMN1,'DEFAULT')
   if column1 is not null then it will return value of column1 but if column1 is null then it will retrun value of 'DEFAULT'

----------------------------------------------------------------------



^abc-----the character should start with abc

[] --> it is used to defined character class, any character with in the bracket can be match

[abc] ---> it will match any character starting from a, b or c
[^abc] --> it will match the character which does not start with a,b or c.

---------------------------------------------------------------

you can count based on condition for example

count( case when colum1='abc', then column2)
 here if column=abc then it will count column2
the above is the same like

count(*)
where column1=abc;

all togthere I learned that you can also filter the record in select statemenet without explicitliy defining in where condition
--------------------------------------------------------------------------

order by cannot be only done in desc or ascending , you can use case statement in order to create manual order by statement.

example 
order by Case when col1=abc then 1
when col2=abc then 3
-----------------------------------------------------------------------------------------------------------------

recursive cte---> recursive cte can be used to select records based on hierarchies, or you can generate sequence of number with help of it.

in recurive cte anchor query does not gets repeated its executes only once then query below union all gets executes each time.

with recursive query you can apply looping logic for example you can create number of records based on condition.

totol post 
5
4 

then you can create 5 and 4 rows with help of increment+1 and checking the less than condition, it also helping in the concept where you have to spilit one rows into multiple rows based on a single row

when you are selecting the record from CTE

with temp as(
select *,1 as level from job_skills where row_id=1
union all
select jb.*,level+1 from job_skills jb inner join temp t on
jb.row_id=t.level+1
)
select * from temp;

here in first iteration always remember as you did union all two records will return with level 1 and level 2 respectively.
As first record is at level one you are joining the main table id with level+1 to get the second record and so on.


---------------------------------------------------------------------------------------------------
rank, dense_rank,rownumber

row_number---> it will always assign unique rank, it does not bother whether data is duplicate based on partition and order by.
rank()--> it will assign same rank for two records if both are identical records inculude partition by column and order by column and will skip next rank within same partition if its gets distinct order by column.
if order by column has unique number for all records than it will asign rank as 1,2,3.
dense_Rank()--> works same like above , the only difference is , it dont skip next rank.


learning --> always order by distinct column which is not duplicates to get next rank otherwise you will get same rank if everything is same.
you can also order by the same column in which you are doing partition by and can use to get next rank in case of row_number


First_Value() --> based on partition you can pick first_Value and last_Value
first_value(length_id) over(partition by len order by id) 

here first column will get picked from lenght_id based on partition

---------------------------------------------------------------------------

Cast function is used to change the data type from one to another for example.

cast(datecalled as date) , her datecalled have dataype as datetime but after using cast it converts to date datatype

--------------------------------------------------------------------------

One cte


----No need to join two cte always to get the result
------if you write one CTE you can use the result,columns while writing your next cte

-----------------------------cross join --------------


cross join will join one item with every item of another product

---------------exclude -----

SELECT * EXCLUDE department_id FROM employee_table;




----------1nf----

a column should be atomic means it should be like name which includes first and last name , first and last name column should be separate.also it tries to identify if there any relationship can be build out then it will seprate the talbes and join with primarykey .



 ---------------------------2NF-----------------------

It must be in 1NF.
All non-prime attributes (attributes that are not part of any candidate key) must be fully functionally dependent on the primary key.

-----------------------3NF-----------

all non key columns are independent of each other



------------------------------exits not exist

suppose when you have to check whehter particular condition exist for example

1 active 
1 inactive
2 active
2 inactive
4 inactive

here you can select id where active never exist for example here for 4 active was not there.



---------------rollback ---

rollback cannot be applied on DDL , it can be applied on DML

save point: you can rollback upto that savepoint and the data which was created after particular save point will be lost.

release save point -> it can release a defined savepoint and then later if you want to rollback to before and after created savepoint you can do that.

write lock will lock the read and write operation on different session but read and write can be happend in same session.
read lock will block write operation from different session as well as write operation from current session.



-----------------------------------------------------------------------------------------

you can use the case statement in where clause as well.

 where rnk=case when (cnt>1 and rnk=2) then 2 when cnt=1 then 1 end;


-----------------------------------------some my sql notes------------------------


if you want to change the configuration property, you choose option file to the changes


-----------------------------
if you want to convert the data 1 3
to 1 3
   3 1
this is a simple trick/concept where you want to get second column data into your first column as well.

then you can simply use union, union joins the data horizonalty/rows whereas join joins the data horiziontaly/coulmn.

So question based on matches can be solved with this, just need to think in reverse.


------------------------------------for query performance--

try to avoid join and use subquery


two column group by means is simple 

how many time first column data is present with second column
2 3
2 3
1 3

so 
2 3 --> 2
1 -3 -1, its simple and basic 

-------------------------------------

in sql you can also compare to string with comparison operator > <, value for example
Ram > shayam,
here r is coming fist in alphabet so ram will win.

I have everytime compared to string with = opeartor but you can also use > < accordingly

-------------------------------------------pivot---

select * from(

select all_colum(which you want to include in result as well the column on which you are using in pivot clause, so column1 and colum2 will also come)
)
pivot(
sum(column1)
for column2 in(rows which you want to see in column)
)

-------------
  
you can use rank function inside substr as well to select the data based on some sequence
10101 --> supppose here you want to select first 1 for row 1 and then next 1 in row 3 then you can do this.












 





            


